---
title: <span style="color:white">Appendix C - The Cookbook</span>
subtitle: "Creating nice looking NBA charts using the HighCharteR library"

author: 
- name: "King Matayo"
  email: kingmatayo.thefirst@gmail.com
date: 02/09/2025

title-block-banner: true
title-block-banner-color: "black"

format: html
html:
code-fold: true
code-summary: "Show the code"
css: style.css
toc: true
toc-location: left
number-sections: false
editor: visual
fig-cap-location: margin
---

```{r warning=FALSE, message=FALSE}

# Load required libraries
library(tidyverse)
library(BasketballAnalyzeR)
library(nbastatR)
library(ggtext)
library(glue)
library(janitor)
library(htmltools)
library(lubridate)
library(highcharter)


# Source functions
source(file="./R/00-functions.R")



```

*The below is a recreation and an update of the orginal HighCharter Cookbook by Tom Bishop available here:* <https://github.com/TMBish/MelbURN-highcharter> . *Another great reference is :* <https://jkunst.com/blog/>

# Overview of Highcharter

## What is it?

`highcharter` is an R implementation of the highcharts javascript graphing API through R's `htmlwidgets`. Most of the highcharts functionality is implemented through `highcharter` however the documentation is a little light. This guide will provide examples on how to create and customise various graphs whilst providing some tips on how to think about the package that will help you build and debug your more ambitious charts. I'll try to show and explain (to the best of my knowledge) the most common graphs and customisation options I use in my day-to-day work. I assume you're familiar with tidy data, dplyr, and R lists, as well as as simple understanding of the grammar of graphics (ggplot / `aes()`).

Highcharts is a commercial product so you can't add these charts to a commercial product (selling to customers) without purchasing a licence but non commercial use (internal organisation / research) comes under their free license.

Your most important resources should be the `highcharter` official website, and the highcharts API documentation which you should bookmark in your browser:

-   [Highcharter Official Website](http://jkunst.com/highcharter/)
-   [Highcharts API Documentation](https://api.highcharts.com/highcharts/)

Additionally get into styling your charts so a few extra resources you might want bookmarked:

-   [coolors for selecting colors](https://coolors.co/app)
-   [google fonts for selecting fonts](https://fonts.google.com/)

As you become more a more proficient `highcharter` user and your charting requirements become more complicated you will need to understand more about the complexities of the highcharts API and you might need to learn, read and write a little javascript. This learning curve is actually the best thing about highcharter: most basic charts are as easy to create as `ggplot`, whilst complex and beautiful charts are still achievable with enough thought and tinkering.

## Why and Why use it?

`highcharter` is a perfect compliment for `ggplot2`. Depending on your needs you it might not completely replace your use of that library, but it may. `ggplot` has a number of functional advantages over highcharter as it has simple implementations of reasonably complex chart types. I'd say I use `highcharter` for 90% of my day to day plots.

If you need to do any of the following or you're a gun at making ggplots look presentable it's I'd suggest using `ggplot`: \* Semi-complicated facetting \* Standard statistical layers / geoms like smooths and confidence intervals / error bars etc.

## Getting the NBA data

I'll be illustrating `highcharter` functionality with an NBA dataset I'll get from the `nbastatR` package.

We'll use the gamelogs (boxscores) from the most recent complete NBA season 2023-24:

```{r}
# I'll just read the csv file, since I already acquired the data using the 01-data-acquisition.R file

# Read csv file with all NBA boxscores data from 2023 to 2024 season
gamelogs <- read.csv("./data/gamelogs_2024.csv")

```

## Basic Charts

### Tidy Data

Most (\~90%) of your day-to-day charts can be probably written with 2-3 lines of code using the `hchart` and `hcaes` functions. These functions allow you to use the extremely powerful grammar of graphics to turn R data into interactive charts - functionality that isn't implemented natively in R `plotly` for example. Like `ggplot2` your data needs to be in tidy / long format so you'll often need to use `tidyr` for some simple data pivotting before passing it to your highchart functions.

A simple `ggplot` of the top 10 scorers in the NBA this year might look like the following:

```{r message=FALSE, warning=FALSE }
gamelogs |> 
  group_by(namePlayer) |> 
  summarise(ppg = mean(pts)) |> 
  arrange(desc(ppg)) |> 
  slice(1:10) |> 
  ggplot(aes(x = namePlayer, y = ppg)) +
  geom_col()
```

This chart, let's be honest here, looks awful. Ggplot needs to do a better job of creating pleasing default charts and themes to entice beginners. Ggplot has also chosen to alphabetize the players on the x-axis even though I specifically ordered the dataframe in descending points per game order, a reasonbaly challenging workaround is needed for an R beginner. Highcharter, on the other hand, creates readable, nice looking default charts that can be presented naturally in a widely used publishing format (a html page).

Here's the highcharter version of this plot which you'll notice feels extremely similar to above:

```{r}
gamelogs |> 
  group_by(namePlayer) |> 
  summarise(ppg = mean(pts)) |> 
  arrange(desc(ppg)) |> 
  slice(1:10) |> 
  hchart("column", hcaes(x = namePlayer, y = ppg)) |> 
  hc_title(text = "Points Per Game - Top 10 Players")
```

This chart doesn't look that nice, but there's some notable format based advantages to the ggplot version:

-   You can interact with it - hover over it to see a (relatively ugly) tooltip
-   It's dynamic - reduce the width of your browser window to see the chart react and replot as it tries to estimate the best way to present the data without it looking busy and cluttered

### Chart Types

There are many chart types available in higcharts which you can see [here](https://api.highcharts.com/highcharts/series) however, I'll go through simple calls for the most common chart types.

#### Column

```{r}
gamelogs |> 
  group_by(namePlayer) |> 
  summarise(apg = mean(ast)) |> 
  arrange(desc(apg)) |> 
  slice(1:10) |> 
  hchart("column", hcaes(x = namePlayer, y = apg)) |> 
  hc_title(text = "Assists Per Game - Top 10 Players")
```

#### Bar

```{r}
gamelogs |> 
  group_by(namePlayer) |> 
  summarise(apg = mean(ast)) |> 
  arrange(desc(apg)) |> 
  slice(1:10) |> 
  hchart("bar", hcaes(x = namePlayer, y = apg)) |> 
  hc_title(text = "Assists Per Game - Top 10 Players")
```

#### Scatter

```{r}
gamelogs |> 
  group_by(namePlayer) |> 
  summarise(orebpg = mean(oreb), drebpg = mean(dreb), trebpg = mean(treb)) |> 
  arrange(desc(trebpg)) |> 
  slice(1:30) |> 
  hchart("scatter", hcaes(x = drebpg, y = orebpg)) |> 
  hc_title(text = "Off. Rebounds vs Def. Rebounds -  30 Players")
```

#### Bubble

```{r}

gamelogs |> 
  group_by(namePlayer) |> 
  summarise(orebpg = mean(oreb), drebpg = mean(dreb), trebpg = mean(treb)) |> 
  arrange(desc(trebpg)) |> 
  slice(1:30) |> 
  hchart("scatter", hcaes(x = drebpg, y = orebpg, size = trebpg)) |> 
  hc_title(text = "Off. Rebounds vs Def. Rebounds - 30 Players")

```

#### Line

```{r}

gamelogs |> 
  filter(namePlayer == "Luka Dončić") |> 
  hchart("line", hcaes(x = numberGamePlayerSeason, y = pts)) |> 
  hc_title(text = "Luka Doncic Points")
```

#### Spline

Splines have smoothed edges

```{r}

gamelogs  |> 
  filter(namePlayer == "Luka Dončić")  |> 
  hchart("spline", hcaes(x = numberGamePlayerSeason, y = pts))  |> 
  hc_title(text = "Luka Doncic Points")
```

#### Area

```{r}
gamelogs |> 
  filter(namePlayer == "Jonathan Isaac") |> 
  hchart("area", hcaes(x = numberGamePlayerSeason, y = blk)) |> 
  hc_title(text = "Jonathan Isaac Blocks")
```

There is an areaspline (smoothed edges) too.

#### Treemap

```{r}

gamelogs |> 
  filter(slugTeam == "TOR") |> 
  group_by(namePlayer) |> 
  summarise(pts = sum(pts), fgpct = sum(fgm) / sum(fga)) |> 
  hchart("treemap", hcaes(name = namePlayer, value = pts, color = fgpct)) |> 
  hc_title(text = "Raptors Scoring") |> 
  hc_subtitle(text = "Shaded by Field Goal %")
```

### Layering Elements

As you can see from the code for some of these charts highcharter is much like ggplot where charts are built with layers. The good thing about highchart layers is that they are layered with the pipe `%>%` or '\|\>' operator rather than ggplots plus operator `+`. Layering is an excellent pattern for charting as chart objects can be passed further down scripts and altered / ammended by simply taking the current chart object and piping more layers onto it.

#### Layering Series (geoms)

Layering series onto the same chart works much like ggplot. It's a little bet less natural as the data object must be supplied each time which prevents big long data into highcharter chains. The additional layers, added with `hc_add_series()` can be added with exactly the same pattern as your initial `hchart()` call. It's good practice to name your series and you can specifically add them to the legend with the `showInLegend` option.

```{r}
# Creating the data object drum for Andre Drumond
drum <- 
  gamelogs |> 
  filter(namePlayer == "Andre Drummond") |> 
  arrange(numberGamePlayerSeason)


# Passing the drum object into the hchart() function to generate a column chart of Drummond's defensive rebounds from last season

hchart(drum, "column", hcaes(x = numberGamePlayerSeason, y = dreb), name = "Defensive Boards", showInLegend = TRUE) |>  # to add a new layer on top of 1st chart, we use the hc_add_series() function. Note that we pass the data object again
  hc_add_series(drum, "column", hcaes(x = numberGamePlayerSeason, y = oreb), name = "Offensive Boards", showInLegend = TRUE) %>%
  hc_title(text = "Andre Drummond Rebounds")

```

Series don't have to be the same type either obviously

```{r}
# Defensive Rebounds - 1st Layer - Column Chart
hchart(drum, "column", hcaes(x = numberGamePlayerSeason, y = dreb), name = "Defensive Boards", showInLegend = TRUE) |> 
  
#Offensive Rebounds - 2nd Layer - Areaspline Chart
  
  hc_add_series(drum, "areaspline", hcaes(x = numberGamePlayerSeason, y = oreb), name = "Offensive Boards", showInLegend = TRUE) |> 
  
#Total Rebounds - 3rd Layer - Scatterplot
  hc_add_series(drum, "scatter", hcaes(x = numberGamePlayerSeason, y = treb), name = "Total Boards", showInLegend = TRUE) |> 
  hc_title(text = "Andre Drummond Rebounds")
```

## Understanding The API

The most important thing to learn about this package is how the relatively undocumented R functions map onto the actual `highcharts` javascript library. The way these `htmlwidgets` packages work is consuming R dataframes and R instructions and turning them into the javascript code, that when embedded into your output html page, will display the particular chart you wanted to create.

Once you understand this concept you'll no longer be limited by the package documnetation, or Josh Kunst's highcharter showcase website. You'll be able to build many, many different charts with near unlimited customisation.

To illustrate how to write R highcharter code from just the javascript API documentation we'll isolate a relatively simple component: a chart's y axis.

### A Simple Example

To customise a highcharter y axis you need to use the `hc_yAxis()` function. Let's have a look at the documentation in R for that function.

```{r eval=FALSE}

help(hc_yAxis)

```

![](assets/hc_yAxis_help.PNG)

There is some example customisation supplied in the examples which can be very helpful, but is still limited to a few examples.

![](assets/hc_yAxis_examples.PNG)

However, it might not click with you immediately what's required or valid as an input for the `hc_yAxis()` function.

-   **How do I know what arguments I can use for this function?**

The answer is always the API documentation. Let's check the actual highcharts API documentation for a highcharts y Axis. You can find it yourself [here](https://api.highcharts.com/highcharts/yAxis) but a screen shot of the page looks like this:

![](assets/yAxis_api_doc.PNG)

The arguments in the green rectangle (there are more than shown) is an exhaustive list of the customisation options for a highcharts y Axis. There are nearly 50 different arguments for a y axis that will change the way your charts looks or works. You can use any of them (provided highcharter stays up to date) in your R function calls.

-   **These don't look like R arguments, how do I write then into my R function?**

The highcharts javascript API is expecting a JSON packet to define all y axis options. In other words: some options are single strings, some are booleans, some are numbers, but some are arrays of numbers or strings, and some are more JSON packets. Highcharter will make conversion provided you supply the options as an appropriately structured and named R list. It's easiest to see this in an example.

#### Simple Arguments

Starting simply using a couple of the simple boolean chart options we can adjust the `gridLineWidth` to 10 which will make the major grid lines extremely thick and change the dash style to "shortdash". We know we can enter the string "shortdash" as a possible option for the grid line dash style because when we click on that option in the API documentation it links us to another page which shows us the valid options:

![](assets/yaxis_dash_style.PNG)

```{r}
gamelogs |> 
  group_by(namePlayer) |> 
  summarise(apg = mean(ast)) |> 
  arrange(desc(apg)) |> 
  slice(1:10) |> 
  hchart("column", hcaes(x = namePlayer, y = apg)) |> 
  hc_title(text = "Assists Per Game") |> 
  hc_yAxis(
    gridLineWidth = 5,
    gridLineDashStyle = "shortdash"
  )
```

Without going to this page on the documentation we'd be completely in the dark about the valid values for `gridLineDashStyle` were. That's why understanding this API documentation / highcharter link is the only way to use this package.

#### Nested Arguments

Your most common form of axis customisation will be probably be the title and labels on the axis. Here's the documentation for a Y axis title

![](assets/yAxis_title_api_doc.PNG)

Notice the dropdown icons and nested arguments. They tell us that the axis title should be defined by it's own JSON packet within the broader y axis configuration. Further any styling you want to add to the title should be another JSON packet (we'll get to this part next). To correctly create this JSON packet in R we use named lists.

When using the documentation all you should think is when I see a nested JSON packet with a dropdown marker / open curly braces I need to start a new R list.

```{r}
gamelogs |> 
  group_by(namePlayer) |> 
  summarise(apg = mean(ast)) |> 
  arrange(desc(apg)) |> 
  slice(1:10) |> 
  hchart("column", hcaes(x = namePlayer, y = apg)) |> 
  hc_title(text = "Assists Per Game") |> 
  hc_yAxis(
    gridLineWidth = 10,
    gridLineDashStyle = "shortdash",
    title = list(
        text = "Assists Per Game", # The actual title text
        align = "high",            # Documentation says options are: low, middle or high
        margin = 10                # Number of pixels between the title and the axis line
    )
  )
```

It's as simple as that. Any argument listed in the highcharts API documentation, whether it's a simple string or number or another nested JSON packet, can be inserted into the appropriate R function call using the right syntax. Failure to name the arguments properly or nest the options appropriately won't cause a fatal error for your chart (in most instances) the options just won't be successfully added to the chart (this can be frustrating debugging at times tbh).

#### Style (CSS)

The style argument is a special case available on many highcharts components. In the documentation for y axis above, only color is listed as an option in the style section but it's not nearly the only option.

If you've done a little bit more web coding you'll know that what it's referring to is CSS style. Any CSS property can be added to a highcharter component that has this style argument. In this case we'll be defining the CSS properties to adjust on the chart title. A list of CSS properties can be found [here](https://www.w3schools.com/cssref/).

What to watch for here is that CSS properties are often hyphenated words (like `font-weight`) which won't play perfectly nicely in R lists so you should define properties in your R lists with camel case version of these property names (eg. `fontWeight`). As an example we'll make the chart title bold, slightly larger and the color of the columns like so:

```{r}
gamelogs |> 
  group_by(namePlayer) |> 
  summarise(apg = mean(ast)) |> 
  arrange(desc(apg)) |> 
  slice(1:10) |> 
  hchart("column", hcaes(x = namePlayer, y = apg)) |> 
  hc_title(text = "Assists Per Game") |> 
  hc_yAxis(
    gridLineWidth = 10,
    gridLineDashStyle = "shortdash",
    title = list(
        text = "Assists Per Game", # The actual title text
        align = "high",            # Documentation says options are: low, middle or high
        margin = 10,               # Number of pixels between the title and the axis line
        style = list(
            fontWeight = "bold",   # Bold
            fontSize = '1.4em',    # 1.4 x tthe size of the default text
            color = "#7cb5ec"      # Hex code for the default blue
        )
    )
  )

```

### Chart Data

Not only are the various chart features understandable and configurable from referencing the javascript API documentation but the data itself (the mapping between R dataframe rows and columns to highcharts data structures you normally just let `hchart()` do on your behalf) is understandable in the same way.

Building your own nested lists to bypass the normal `hchart()` approach is a very useful tool to have at your disposal but is overkill for 99% of charts that can be built with a simpler approach. It is, however, helpful to understand and if you want to make highly bespoke charts you'll probably need to understand how this works.

#### Columns

Let's check the API documentation for a column graph. We'll find the specification for each chart type under the `series >` sub header.

What we're interested in is the `series > column > data` entry which tells us the viable formats to enter the data for a column chart:

![](assets/series_column.PNG)

The documentation says we can enter the data in 3 different ways:

1.  A simple array of numerical values
2.  A array of arrays with x, y value pairs
3.  An array of objects (JSON packets) with each object defining a single data point

Let's try to implement the assists chart in each of these 3 ways but without the help of `hchart()`.

#### Option 1: Simple Array

![](assets/hc_columns_data_1.PNG)

The first option says data can be presented as a simple array of values. When we see JSON "array" we should generally think of R lists but sometimes an R vector works too.

```{r}

# Get list of top-10 league leaders in assists
assists <- 
  gamelogs |> 
  group_by(namePlayer) |> 
  summarise(apg = mean(ast)) |> 
  arrange(desc(apg)) |> 
  slice(1:10)

# Pull out names and assists / game as vectors
apg <- assists |>  pull(apg)
namePlayer = assists |>  pull(namePlayer)

# The Assists Per Game Vector
apg

```

To build a highcharter chart without `hchart()` we need to do it in 2 steps: instantiate a highcharter plot with `highchart()` and then add data and chart type with `hc_add_series()`.

```{r}
highchart() %>%
hc_add_series(
  type = "column",
  data = apg
)
```

So it worked, but given we only passed the chart the assist per game data series it doesn't know what players the values correspond to. Referencing the option 1 specification above, we can add the player names to the chart in a second step by specifying axis "categories" manually:

```{r}
highchart() |> 
hc_add_series(
  type = "column",
  data = apg
) |> 
hc_xAxis(categories = namePlayer)
```

#### Option 2: Array of Arrays

![](assets/hc_columns_data_2.PNG)

So this option suggests you can provide the data as an array of x, y pairs. This isn't a perfectly natural data structure for R but we can construct a list of x, y pairs from a dataframe with the help of the `list_parse2()` function exported with highcharter. The reason this function has been created alongside these charting functions is exactly for this purpose. You often need to construct these specific list types if you're building charts this way.

**Hardcode List**

It's helpful to see the R code for each of these lists before we let a blackbox function build them on our behalf so we'll repeat this pattern for the rest of these chart types. First let's hardcode an example data series to see what the data looks like in R:

```{r}
highchart() %>%
 hc_add_series(
   type = "column",
   data = list(
     list("Russell Westbrook",10.5),
     list("John Wall", 8.7),
     list("Kyle Lowry", 8.6)
   )
 )
```

Notice that the x values (assuming these are x,y pairs) haven't been placed on the x axis as we'd like but rather appear as the "name" of the column when you hover over it - this is called the series name.

**Generate List**

Instead of manually hardcoding the list in the right structure we can construct the same structure for the top 10 players using `list_parse2()`. This function will create a list of length equal to the rows in your dataframe with pairs of values that come from the columns:

```{r}
# Construct the list in the right format
assistsListXYPairs <- 
  assists |> 
  list_parse2()

# Lets Inspect the first 2 elements
assistsListXYPairs[1:2]
```

That's exactly what we were looking for, let's pass it as the value to the data argument and add the names on as categories to finish it off

```{r}
highchart() |> 
hc_add_series(
  type = "column",
  data = assistsListXYPairs
) |> 
hc_xAxis(categories = namePlayer)
```

#### Array of Objects

![](assets/hc_columns_data_3.PNG)

This is the most general and most frequently viable data specification option for a highcharts series. An array of JSON packets describing all the appropriate properties required (or possible) for the chart. In R this will be a list (array) of named lists.

**Hardcode List**

Again let's harcode the named list manually to see what it looks like. We can even pass distinct column colors to illustrate that the named list configures each column independently:

```{r}
highchart() |> 
 hc_add_series(
   type = "column",
   data = list(
     list(
       name = "Russell Westbrook",
       y = 10.5,
       color = "#5DA271"
      ),
     list(
       name = "John Wall", 
       y = 8.7,
       color = "#7DB58D"
      ),
     list(
       name = "Kyle Lowry", 
       y = 8.6,
       color = "#A4CBAF"
     )
   )
 )

```

To achieve this list structure we use the other list parsing function `list_parse()` which will do the same thing as `list_parse2()` but preserve the names on the list. However, we do need the appropriate names inside each point specification so the column names to match up to the graph dimensions. We must first rename the columns. Best way to understand is to inspect a couple of elements:

```{r}
assistsListConfig <- 
  assists |> 
  rename(name = namePlayer, y = apg) |> 
  list_parse()

assistsListConfig[1:2]
```

Now passing as data for the series

```{r}
highchart() |> 
hc_add_series(
  type = "column",
  data = assistsListConfig
) |> 
hc_xAxis(categories = namePlayer)
```

#### `hc_add_series_list()`

So we understand the various ways we can construct the data vectors / lists that can be passed to as the data argument in `hc_add_series()`. The natural extension to this process is that not just the data is defined by a correctly structured named list but the *entire* series specification is input as a named list. That's what `hc_series_add_list()` expects - a single named list defining the entire series config.

-   **Remember, the data, is just one component of the configuration of a series**

**Hardcode List**

Again let's start with the manual harcoded list first

```{r}
highchart() |> 
 hc_add_series_list(
   # Parent list containing a set of N series
   list(
     # An Individual Series Config
     list(
       name = "Assists Per Game",
       type = "column",
       data = list(
         list(
           name = "Russell Westbrook",
           y = 10.5
          ),
         list(
           name = "John Wall", 
           y = 8.7
          ),
         list(
           name = "Kyle Lowry", 
           y = 8.6
         )
       )
     )
   )
 )
```

Everything about the series (name, type, data) is defined in a named list. This gives us the most flexibility for advanced charts, but the challenge is obviously constructing this deeply nested named list in exactly the right way. Like we've seen the package provides as with a number of helpers to make this more feasible however it's normally overkill for most tasks.

**Generate List**

Let's try to do the same chart again.

```{r}
seriesConfigDF <- 
  assists |> 
  rename(name = namePlayer, y = apg) |> 
  nest() |> 
  mutate(data = data |>  map(list_parse)) |> 
  mutate(
    name = "Assists Per Game",
    type = "column"
  )

seriesConfigDF
```

So for us to use `list_parse()` appropriately here we need a single row which defines our series. On that row at the top level we need the series name, the series type and then a list column which contains the correctly structured list which we saw could be accomplished using the `list_parse()` function on the renamed dataframe. That's what we have so now we can use `list_parse()` again on this dataframe to correctly structure the list and plot that series config list.

```{r}
seriesConfig <- 
  seriesConfigDF |> 
  list_parse()

highchart() |> 
 hc_add_series_list(seriesConfig) |> 
  hc_xAxis(categories = namePlayer)
```

Now, you might be thinking that's alot of work and complexity to plot this simple chart. Let's show the power of this approach by extending this aprroach to multiple series. Notice the reasonably involved R required to build the right named list, but after that's achieved there's no highcharter configuration required. Hopefully this simple example will help you when you're building your own deeply nested named lists for advanced attempts

```{r}
seriesConfig <- 
  gamelogs |> 
  group_by(namePlayer) |> 
  summarise(apg = mean(ast), pts = mean(pts)) |> 
  arrange(desc(apg)) |> 
  slice(1:10) |> 
  pivot_longer(-namePlayer, names_to = "stat", values_to = "y") |> 
  rename(name = namePlayer) |> 
  group_by(stat) |> 
  nest() |> 
  mutate(data = data %>% map(list_parse)) |> 
  rename(name = stat) |> 
  mutate(
    type = case_when(
      name == "apg" ~ "column",
      TRUE ~ "line"
    )
  ) |> 
  list_parse()

highchart() %>%
 hc_add_series_list(seriesConfig) %>%
 hc_xAxis(categories = namePlayer)
```

### Conclusion

Hopefully what you should understand after these examples is that highcharts on the javascript side are just giant JSON configuration objects. Even the data is nested within the `series > data` slot in the appropriately structured format. On the R side a set of functions and helpers enable you to create this JSON often with only 1 or 2 lines of code. Most of the time you simply pass `hchart()` a tidy dataframe and let it convert your data into the JSON that will be placed inside the series config. Every now and then, though, and when you need to venture into more complicated chart types (animated charts is an example) the data specification won't be simple and easy to construct with `hchart()` and you'll need to build the raw data specification list yourself. To do so you need to know how to wrangle lists, likely with purrr, but most importantly: you need to understand the structure the javascript API needs expects. Knowing that you just fiddle around with purrr functions till your output list looks exactly right.

...

# References/Sources/Citations:

-   Bishop, Tom. (2020). *A cookbook for we based data visualisations with R + Highcharter on June 30, 2020*. Available at: <https://github.com/TMBish/MelbURN-highcharter> (Accessed: 9 February 2025).

-   Kunst, Joshua (2020). *Data, Code and Visualization Blog, 2020.* Available at: <https://github.com/jbkunst/blog> (Accessed: 9 February 2025)
