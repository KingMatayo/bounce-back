---
title: <span style="color:white">Appendix C - The Cookbook</span>
subtitle: "Creating nice looking NBA charts using the HighCharteR library"

author: 
- name: "King Matayo"
  email: kingmatayo.thefirst@gmail.com
date: 02/09/2025

title-block-banner: true
title-block-banner-color: "black"

format: html
html:
code-fold: true
code-summary: "Show the code"
css: style.css
toc: true
toc-location: left
number-sections: false
editor: visual
fig-cap-location: margin
---

```{r warning=FALSE, message=FALSE}

# Load required libraries
library(tidyverse)
library(BasketballAnalyzeR)
library(nbastatR)
library(ggtext)
library(glue)
library(janitor)
library(htmltools)
library(lubridate)
library(highcharter)


# Source functions
source(file="./R/00-functions.R")



```

*The below is a recreation and an update of the orginal HighCharter Cookbook by Tom Bishop available here:* <https://github.com/TMBish/MelbURN-highcharter> . *Another great reference is :* <https://jkunst.com/blog/>

# Overview of Highcharter

## What is it?

`highcharter` is an R implementation of the highcharts javascript graphing API through R's `htmlwidgets`. Most of the highcharts functionality is implemented through `highcharter` however the documentation is a little light. This guide will provide examples on how to create and customise various graphs whilst providing some tips on how to think about the package that will help you build and debug your more ambitious charts. I'll try to show and explain (to the best of my knowledge) the most common graphs and customisation options I use in my day-to-day work. I assume you're familiar with tidy data, dplyr, and R lists, as well as as simple understanding of the grammar of graphics (ggplot / `aes()`).

Highcharts is a commercial product so you can't add these charts to a commercial product (selling to customers) without purchasing a licence but non commercial use (internal organisation / research) comes under their free license.

Your most important resources should be the `highcharter` official website, and the highcharts API documentation which you should bookmark in your browser:

-   [Highcharter Official Website](http://jkunst.com/highcharter/)
-   [Highcharts API Documentation](https://api.highcharts.com/highcharts/)

Additionally get into styling your charts so a few extra resources you might want bookmarked:

-   [coolors for selecting colors](https://coolors.co/app)
-   [google fonts for selecting fonts](https://fonts.google.com/)

As you become more a more proficient `highcharter` user and your charting requirements become more complicated you will need to understand more about the complexities of the highcharts API and you might need to learn, read and write a little javascript. This learning curve is actually the best thing about highcharter: most basic charts are as easy to create as `ggplot`, whilst complex and beautiful charts are still achievable with enough thought and tinkering.

## Why and Why use it?

`highcharter` is a perfect compliment for `ggplot2`. Depending on your needs you it might not completely replace your use of that library, but it may. `ggplot` has a number of functional advantages over highcharter as it has simple implementations of reasonably complex chart types. I'd say I use `highcharter` for 90% of my day to day plots.

If you need to do any of the following or you're a gun at making ggplots look presentable it's I'd suggest using `ggplot`: \* Semi-complicated facetting \* Standard statistical layers / geoms like smooths and confidence intervals / error bars etc.

## Getting the NBA data

I'll be illustrating `highcharter` functionality with an NBA dataset I'll get from the `nbastatR` package.

We'll use the gamelogs (boxscores) from the most recent complete NBA season 2023-24:

```{r}
# I'll just read the csv file, since I already acquired the data using the 01-data-acquisition.R file

# Read csv file with all NBA boxscores data from 2023 to 2024 season
gamelogs <- read.csv("./data/gamelogs_2024.csv")

```

## Basic Charts

### Tidy Data

Most (\~90%) of your day-to-day charts can be probably written with 2-3 lines of code using the `hchart` and `hcaes` functions. These functions allow you to use the extremely powerful grammar of graphics to turn R data into interactive charts - functionality that isn't implemented natively in R `plotly` for example. Like `ggplot2` your data needs to be in tidy / long format so you'll often need to use `tidyr` for some simple data pivotting before passing it to your highchart functions.

A simple `ggplot` of the top 10 scorers in the NBA this year might look like the following:

```{r message=FALSE, warning=FALSE }
gamelogs |> 
  group_by(namePlayer) |> 
  summarise(ppg = mean(pts)) |> 
  arrange(desc(ppg)) |> 
  slice(1:10) |> 
  ggplot(aes(x = namePlayer, y = ppg)) +
  geom_col()
```

This chart, let's be honest here, looks awful. Ggplot needs to do a better job of creating pleasing default charts and themes to entice beginners. Ggplot has also chosen to alphabetize the players on the x-axis even though I specifically ordered the dataframe in descending points per game order, a reasonbaly challenging workaround is needed for an R beginner. Highcharter, on the other hand, creates readable, nice looking default charts that can be presented naturally in a widely used publishing format (a html page).

Here's the highcharter version of this plot which you'll notice feels extremely similar to above:

```{r}
gamelogs |> 
  group_by(namePlayer) |> 
  summarise(ppg = mean(pts)) |> 
  arrange(desc(ppg)) |> 
  slice(1:10) |> 
  hchart("column", hcaes(x = namePlayer, y = ppg)) |> 
  hc_title(text = "Points Per Game - Top 10 Players")
```

This chart doesn't look that nice, but there's some notable format based advantages to the ggplot version:

-   You can interact with it - hover over it to see a (relatively ugly) tooltip
-   It's dynamic - reduce the width of your browser window to see the chart react and replot as it tries to estimate the best way to present the data without it looking busy and cluttered

### Chart Types

There are many chart types available in higcharts which you can see [here](https://api.highcharts.com/highcharts/series) however, I'll go through simple calls for the most common chart types.

#### Column

```{r}
gamelogs |> 
  group_by(namePlayer) |> 
  summarise(apg = mean(ast)) |> 
  arrange(desc(apg)) |> 
  slice(1:10) |> 
  hchart("column", hcaes(x = namePlayer, y = apg)) |> 
  hc_title(text = "Assists Per Game - Top 10 Players")
```

#### Bar 

```{r}
gamelogs |> 
  group_by(namePlayer) |> 
  summarise(apg = mean(ast)) |> 
  arrange(desc(apg)) |> 
  slice(1:10) |> 
  hchart("bar", hcaes(x = namePlayer, y = apg)) |> 
  hc_title(text = "Assists Per Game - Top 10 Players")
```

#### Scatter

```{r}
gamelogs |> 
  group_by(namePlayer) |> 
  summarise(orebpg = mean(oreb), drebpg = mean(dreb), trebpg = mean(treb)) |> 
  arrange(desc(trebpg)) |> 
  slice(1:30) |> 
  hchart("scatter", hcaes(x = drebpg, y = orebpg)) |> 
  hc_title(text = "Off. Rebounds vs Def. Rebounds -  30 Players")
```

#### Bubble

```{r}

gamelogs |> 
  group_by(namePlayer) |> 
  summarise(orebpg = mean(oreb), drebpg = mean(dreb), trebpg = mean(treb)) |> 
  arrange(desc(trebpg)) |> 
  slice(1:30) |> 
  hchart("scatter", hcaes(x = drebpg, y = orebpg, size = trebpg)) |> 
  hc_title(text = "Off. Rebounds vs Def. Rebounds - 30 Players")

```

#### Line

```{r}

gamelogs |> 
  filter(namePlayer == "Luka Dončić") |> 
  hchart("line", hcaes(x = numberGamePlayerSeason, y = pts)) |> 
  hc_title(text = "Luka Doncic Points")
```

#### Spline

Splines have smoothed edges

```{r}

gamelogs  |> 
  filter(namePlayer == "Luka Dončić")  |> 
  hchart("spline", hcaes(x = numberGamePlayerSeason, y = pts))  |> 
  hc_title(text = "Luka Doncic Points")
```

#### Area

```{r}
gamelogs |> 
  filter(namePlayer == "Jonathan Isaac") |> 
  hchart("area", hcaes(x = numberGamePlayerSeason, y = blk)) |> 
  hc_title(text = "Jonathan Isaac Blocks")
```

There is an areaspline (smoothed edges) too.

#### Treemap

```{r}

gamelogs |> 
  filter(slugTeam == "TOR") |> 
  group_by(namePlayer) |> 
  summarise(pts = sum(pts), fgpct = sum(fgm) / sum(fga)) |> 
  hchart("treemap", hcaes(name = namePlayer, value = pts, color = fgpct)) |> 
  hc_title(text = "Raptors Scoring") |> 
  hc_subtitle(text = "Shaded by Field Goal %")
```

### Layering Elements

As you can see from the code for some of these charts highcharter is much like ggplot where charts are built with layers. The good thing about highchart layers is that they are layered with the pipe `%>%` or '\|\>' operator rather than ggplots plus operator `+`. Layering is an excellent pattern for charting as chart objects can be passed further down scripts and altered / ammended by simply taking the current chart object and piping more layers onto it.

#### Layering Series (geoms)

Layering series onto the same chart works much like ggplot. It's a little bet less natural as the data object must be supplied each time which prevents big long data into highcharter chains. The additional layers, added with `hc_add_series()` can be added with exactly the same pattern as your initial `hchart()` call. It's good practice to name your series and you can specifically add them to the legend with the `showInLegend` option.

```{r}
# Creating the data object drum for Andre Drumond
drum <- 
  gamelogs |> 
  filter(namePlayer == "Andre Drummond") |> 
  arrange(numberGamePlayerSeason)


# Passing the drum object into the hchart() function to generate a column chart of Drummond's defensive rebounds from last season

hchart(drum, "column", hcaes(x = numberGamePlayerSeason, y = dreb), name = "Defensive Boards", showInLegend = TRUE) |>  # to add a new layer on top of 1st chart, we use the hc_add_series() function. Note that we pass the data object again
  hc_add_series(drum, "column", hcaes(x = numberGamePlayerSeason, y = oreb), name = "Offensive Boards", showInLegend = TRUE) %>%
  hc_title(text = "Andre Drummond Rebounds")

```

Series don't have to be the same type either obviously

```{r}
# Defensive Rebounds - 1st Layer - Column Chart
hchart(drum, "column", hcaes(x = numberGamePlayerSeason, y = dreb), name = "Defensive Boards", showInLegend = TRUE) |> 
  
#Offensive Rebounds - 2nd Layer - Areaspline Chart
  
  hc_add_series(drum, "areaspline", hcaes(x = numberGamePlayerSeason, y = oreb), name = "Offensive Boards", showInLegend = TRUE) |> 
  
#Total Rebounds - 3rd Layer - Scatterplot
  hc_add_series(drum, "scatter", hcaes(x = numberGamePlayerSeason, y = treb), name = "Total Boards", showInLegend = TRUE) |> 
  hc_title(text = "Andre Drummond Rebounds")
```

## Understanding The API

The most important thing to learn about this package is how the relatively undocumented R functions map onto the actual `highcharts` javascript library. The way these `htmlwidgets` packages work is consuming R dataframes and R instructions and turning them into the javascript code, that when embedded into your output html page, will display the particular chart you wanted to create.

Once you understand this concept you'll no longer be limited by the package documnetation, or Josh Kunst's highcharter showcase website. You'll be able to build many, many different charts with near unlimited customisation.

To illustrate how to write R highcharter code from just the javascript API documentation we'll isolate a relatively simple component: a chart's y axis.

### A Simple Example

To customise a highcharter y axis you need to use the `hc_yAxis()` function. Let's have a look at the documentation in R for that function.

```{r eval=FALSE}

help(hc_yAxis)

```

![](assets/hc_yAxis_help.PNG)

...

# References/Sources/Citations:

-   Bishop, Tom. (2020). *A cookbook for we based data visualisations with R + Highcharter on June 30, 2020*. Available at: <https://github.com/TMBish/MelbURN-highcharter> (Accessed: 9 February 2025).

-   Kunst, Joshua (2020). *Data, Code and Visualization Blog, 2020.* Available at: <https://github.com/jbkunst/blog> (Accessed: 9 February 2025)
